name: Release to Maven Central

on:
  push:
    tags:
      - 'v*'  # 触发条件：推送以 v 开头的 tag，如 v1.0.14

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Import GPG key
      id: import_gpg
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        # 检查环境变量
        if [ -z "$GPG_PRIVATE_KEY" ]; then
          echo "错误: GPG_PRIVATE_KEY 为空，请检查 GitHub Secrets 配置"
          echo "请访问: https://github.com/${{ github.repository }}/settings/secrets/actions"
          exit 1
        fi
        
        if [ -z "$GPG_PASSPHRASE" ]; then
          echo "错误: GPG_PASSPHRASE 为空，请检查 GitHub Secrets 配置"
          exit 1
        fi
        
        # 创建临时文件存储密钥
        GPG_KEY_FILE=$(mktemp)
        
        # 尝试不同的密钥格式
        # 1. 先尝试直接使用（假设是 armored 格式）
        echo "$GPG_PRIVATE_KEY" > "$GPG_KEY_FILE"
        
        # 检查是否是 base64 编码
        if ! grep -q "BEGIN PGP" "$GPG_KEY_FILE"; then
          echo "$GPG_PRIVATE_KEY" | base64 --decode > "$GPG_KEY_FILE"
        fi
        
        # 导入密钥
        gpg --batch --import "$GPG_KEY_FILE" 2>&1 | grep -v "^gpg:" || true
        rm -f "$GPG_KEY_FILE"
        
        # 获取密钥 ID（短格式，用于签名）
        GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format SHORT | grep sec | head -1 | awk '{print $2}' | cut -d'/' -f2)
        echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_OUTPUT
        
        # 配置 GPG
        mkdir -p ~/.gnupg
        echo "use-agent" >> ~/.gnupg/gpg.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        chmod 600 ~/.gnupg/*
        chmod 700 ~/.gnupg
        
        # 重启 GPG agent
        gpgconf --kill gpg-agent
        gpgconf --launch gpg-agent
        
        # 测试签名
        echo "test" | gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --armor --detach-sign > /dev/null 2>&1 || {
          echo "错误: GPG 签名配置失败"
          exit 1
        }
    
    - name: Configure Maven settings
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << EOF
        <settings xmlns="http://maven.apache.org/SETTINGS/1.2.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.2.0
                                      https://maven.apache.org/xsd/settings-1.2.0.xsd">
          <servers>
            <server>
              <id>central</id>
              <username>${MAVEN_USERNAME}</username>
              <password>${MAVEN_PASSWORD}</password>
            </server>
          </servers>
          
          <profiles>
            <profile>
              <id>gpg</id>
              <activation>
                <activeByDefault>true</activeByDefault>
              </activation>
              <properties>
                <gpg.executable>gpg</gpg.executable>
                <gpg.passphrase>${GPG_PASSPHRASE}</gpg.passphrase>
              </properties>
            </profile>
          </profiles>
        </settings>
        EOF
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ steps.get_version.outputs.VERSION }}
        mvn versions:commit
    
    - name: Build and Deploy to Maven Central
      env:
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        mvn clean deploy \
          -DskipTests \
          -Pgpg \
          -Dgpg.keyname=${{ steps.import_gpg.outputs.GPG_KEY_ID }} \
          -Dgpg.passphrase="$GPG_PASSPHRASE" \
          -Dgpg.pinentry-mode=loopback
    
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: v${{ steps.get_version.outputs.VERSION }}
        name: Release v${{ steps.get_version.outputs.VERSION }}
        body: |
          ## OpenAI Java SDK v${{ steps.get_version.outputs.VERSION }}
          
          ### Maven Dependency
          
          ```xml
          <dependency>
              <groupId>io.github.twwch</groupId>
              <artifactId>markdwon2office</artifactId>
              <version>${{ steps.get_version.outputs.VERSION }}</version>
          </dependency>
          ```
          
          ### Gradle Dependency
          
          ```gradle
          implementation 'io.github.twwch:markdwon2office:${{ steps.get_version.outputs.VERSION }}'
          ```
          
          ### Links
          
          - [Maven Central](https://central.sonatype.com/artifact/io.github.twwch/markdwon2office/${{ steps.get_version.outputs.VERSION }})
          - [Documentation](https://github.com/twwch/markdwon2office/blob/main/README.md)
        draft: false
        prerelease: false
        generateReleaseNotes: true
        token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}